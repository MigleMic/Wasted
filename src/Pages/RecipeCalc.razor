@page "/recipecalc"
@using System.IO
@using Wasted.Data
@inject RecipeCalcService RecipeCalcService 

<h1>RECIPE CALCULATOR</h1>

<p style="font-size:20px;">Reduce food waste by using leftover products!</p>

<p style="font-size:20px;">Using this page you will be able to enter (or upload) the produce, and we will provide you with endless recipes, where you can use them!</p>
<hr><hr>

<button class="btn btn-primary" @onclick="SaveList">Save list</button>

<button class="btn btn-primary" @onclick="FindRecipe">Find a recipe!</button>

<button class="btn btn-danger" @onclick="RemoveExpiredProducts">Remove Expired</button>

<hr>

@code {

    string itemTextField = "";
    string leftTextField = "";
    string unitTextField = "";
    string dateTextField = "";
    string dishFilter = "All";
    List<RecipeItemModel> products = new();
    List<String> expiringProducts = new();
    List<String> expiredProducts = new();
    List<DishModel> dishes = new List<DishModel>();

    protected override async Task OnInitializedAsync()
    {
        products = await RecipeCalcService.GetProducts();
        expiringProducts = RecipeCalcService.FindExpiringProducts(products);
        expiredProducts = RecipeCalcService.FindExpiredProducts(products);
    }

    private void AddProduct()
    {
        ValidationService valid = new ValidationService();
        bool emptyFieldsPresent = valid.EmptyFieldsPresent(itemTextField, leftTextField, unitTextField, dateTextField);

        if(emptyFieldsPresent)
        {
            RecipeCalcService.MsgToUser = "Empty fields are present, cannot add product";
            return;
        }
        
        RecipeItemModel newProduct = new RecipeItemModel(){Item = itemTextField.ToLower().Trim(), Amount = Int32.Parse(leftTextField), Unit = unitTextField, Date = dateTextField};
        newProduct.Item = newProduct.Item[0].ToString().ToUpper() + newProduct.Item.Substring(1);

        itemTextField = "";
        leftTextField = "";
        unitTextField = "";
        dateTextField = "";
        
        foreach (var product in products)         //in case of same items being entered twice
        {
            if(newProduct.Item == product.Item)
            {
                RecipeCalcService.ChangeMeasurements(newProduct);
                product.Amount += newProduct.Amount;
                return;
            }
        }

        products.Add(newProduct);
        expiringProducts = RecipeCalcService.FindExpiringProducts(products);
        expiredProducts = RecipeCalcService.FindExpiredProducts(products);
    }

    private void SaveList()
    {
        RecipeCalcService.SaveProducts(products);
    }

    private void FindRecipe()
    {
        CanMakeDish makeable = new CanMakeDish(RecipeCalcService.haveEnoughIngredients);
        dishes = RecipeCalcService.FindRecipe(products, makeable);
    }

    private void GetDishType(string sender)
    {
        //dishType = DishType.ReturnDishType(sender);
        dishFilter = sender;
    }

    private void RemoveExpiredProducts()
    {
        products = RecipeCalcService.RemoveExpiredProducts(products);
        expiredProducts.Clear();
    }
}
<table class="table">
    <thead>
        <tr>
            <th>Item</th>
            <th>Amount</th>
            <th>Measurement</th>
            <th>Best until</th>
            <th>Add/Remove</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var product in products)
    {
        <tr>
            <td>@product.Item</td>
            <td>@product.Amount</td>
            <td>@product.Unit</td> 
            <td>@product.Date</td> 
            <td>
            <button class="btn btn-danger" @onclick="() => products.Remove(product)">-</button>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="input">
    <span class="inputSpan">
        <input class="inputField" type = "text" size="10" id="itemfieldid" @bind="@itemTextField" @oninput="(e) => { itemTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> 
        <input class="inputField" type = "number" id="leftfieldid" @bind="@leftTextField" @oninput="(e) => { leftTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> 
        <select class="inputField" @bind="@unitTextField" @oninput="(e) => { unitTextField = e.Value ==null? string.Empty:(string)e.Value;}" name="unit" id="unit">
                        <option value="g">g</option>
                        <option value="kg">kg</option>
                        <option value="l">l</option>
                        <option value="ml">ml</option>
                        <option value="oz">oz</option>
                        <option value="unit(s)"></option>
                        </select>
        <input class="inputField" @oninput="(e) => { dateTextField = e.Value ==null? string.Empty:(string)e.Value;}" type="date" id="bestuntilday" name="bestuntilday" size="1">
        <button class="btn btn-primary" @onclick="AddProduct">+</button>
    </span>
</div>

@if(dishes.Any())
{
    <h1><font color=#3a0647><br>Here's what you can make:</font></h1>
        <div>
            <button class="btn btn-info" @onclick='() => GetDishType("All")'>All</button>
            <button class="btn btn-info" @onclick='() => GetDishType("Baked")'>Baked</button>
            <button class="btn btn-info" @onclick='() => GetDishType("Pasta")'>Pasta</button>
            <button class="btn btn-info" @onclick='() => GetDishType("Salad")'>Salad</button>
            <button class="btn btn-info" @onclick='() => GetDishType("Soup")'>Soup</button> 
        </div>
    <h1><font style="color:#3a0647;font-size:20px">(Showing @dishFilter)</font></h1>
}

@if(dishes.Any())
{
    <dl class="Recipes" >
    @foreach (var dish in dishes) 
    {
        if(dishFilter == "All" || dishFilter == dish.Type)
        {
        <dt style="color:#3a0647;font-size:30px;">@dish.Name</dt>
            <dd1>You will need:</dd1>
                <ul>
                    @foreach (var Ingredient in dish.Ingredients)
                    {
                        <li style="color:#3a0647;font-size:20px;">@Ingredient.Item @Ingredient.Amount @Ingredient.Unit</li>
                    }
                </ul>
                }
            }
            </dl> 
}

@if(expiredProducts.Any())
{
    <div class="expire">
        <h1><font style="color:red;font-size:25px;"><br>Be careful! These products have already expired:</font></h1>
        <ul>
            @foreach (string expiredProduct in expiredProducts)
            {
                <li style="color:red;font-size:25px;">@expiredProduct</li>
            }
        </ul>
    </div>
}

@if(expiringProducts.Any())
{
    <div class="expire">
        <h1><font style="color:#ff9900;font-size:25px;"><br>These products have 4 or less days left, before they expire:</font></h1>
        <ul>
            @foreach (string expiringProduct in expiringProducts)
            {
                <li style="color:#ff9900;font-size:25px;">@expiringProduct</li>
            }
        </ul>
    </div>
}

@if(@RecipeCalcService.MsgToUser != "")
{
    if(@RecipeCalcService.MsgToUser == @RecipeCalcService.ExpiredListTooLong)
    {
        <h1 style="color:red;font-size:25px;text-align:center;">
            <br>@RecipeCalcService.MsgToUser
            <button class="btn btn-danger" style="text-align: center;" @onclick="RemoveExpiredProducts">Remove</button>
        </h1>
    }
    else
    {
        <h1 style="color:red;font-size:25px;text-align:center;"><br>@RecipeCalcService.MsgToUser</h1>
    }
}
    