@page "/recipecalc"
@using System.IO
@using Wasted.Data
@using Newtonsoft.Json
@inject RecipeCalcService RecipeCalcService
 

<h1><font color=rbg(0,15,128)><br>RECIPE CALCULATOR</font></h1>

<p style="font-size:20px;">Reduce food waste by using leftover products!</p>

<p style="font-size:20px;">Using this page you will be able to enter (or upload) the produce, and we will provide you with endless recipes, where you can use them!</p>
<hr><hr>

<button class="btn btn-primary" @onclick="SaveList">Save list</button>

<button class="btn btn-primary" @onclick="LoadList">Load list</button>

<button class="btn btn-primary" @onclick="FindRecipe">Find a recipe!</button>

<hr>

@code {
    string itemTextField = "";
    string leftTextField = "";
    string unitTextField = "";
    string dateTextField = "";
    List<RecipeModel> products = new();
    List<RecipeModel> ingredients = new();

    List<String> dishes = new();

    List<String> badProducts = new();


    private void AddProduct()
    {
        //in case of same items being entered twice
        foreach (var product in products)
        {
            if(itemTextField.ToLower().Trim() == product.Item.ToLower())
            {
                if(unitTextField == "kg" || unitTextField == "l")
                {product.Left += Int32.Parse(leftTextField) * 1000;}
                else
                {product.Left += Int32.Parse(leftTextField);} //adds what's left and deletes the new item
                itemTextField = "";
                leftTextField = "";
                unitTextField = "";
                dateTextField = "";
            }
        }
        if(!(string.IsNullOrEmpty(itemTextField)&&string.IsNullOrEmpty(leftTextField)&&string.IsNullOrEmpty(unitTextField)&&string.IsNullOrEmpty(dateTextField)))
        products.Add(new RecipeModel(){Item = itemTextField.Trim(), Left = Int32.Parse(leftTextField), Unit = unitTextField, Date = dateTextField});
    }

    private void SaveList()
    {
        foreach(var product in products)
        {
            if(product.Unit == "kg")
            {product.Left = product.Left * 1000; product.Unit = "g";}
            else if(product.Unit == "l")
            {product.Left = product.Left * 1000; product.Unit = "ml";}
            else if(product.Unit == "oz")
            {product.Left = product.Left * 28; product.Unit = "g";}
        } 
        File.WriteAllText("RecipeList.json", JsonConvert.SerializeObject(products));
    } 

    private void LoadList()
    {
        products.Clear();
        badProducts.Clear();
        products = RecipeCalcService.GetProducts();
        foreach (var product in products)
        {
            product.Item = char.ToUpper(product.Item[0]) + product.Item.Substring(1);
            if((DateTime.Parse(product.Date) - DateTime.Today).TotalDays < 3)
            {
                badProducts.Add(product.Item);
            }
        } 
    }

    private void FindRecipe()
    {
        System.IO.StreamReader RecipeFile = new System.IO.StreamReader(@"Recipes.txt");
        dishes.Clear();
        do
        {
            string dishName = RecipeFile.ReadLine();
            int Need = Int32.Parse(RecipeFile.ReadLine());
            ingredients.Clear();
            for (int i = 0; i<Need; i++)
            {
            string[] item = RecipeFile.ReadLine().Split(';');
            ingredients.Add(new RecipeModel(){Item = item[0], Left = Int32.Parse(item[1]), Unit = item[2]});
            }
            foreach (var ingredient in ingredients)
            {
                foreach(var product in products)
                {
                    if(ingredient.Item.Equals(product.Item.ToLower()) && ingredient.Left <= product.Left)
                    {
                        Need--;
                    }
                }   
            }
            if(Need == 0)
            {
                dishes.Add(dishName.ToUpper());
            }
        }while(RecipeFile.ReadLine() != null);

        if(!dishes.Any())
            dishes.Add("You can't make anything");
    }
}

<table class="table">
    <tr>
        <th>Item</th>
        <th>Left</th>
        <th>Measurement</th>
        <th>Best until</th>
        <th>Add/Remove</th>
    </tr>

@foreach (var product in products)
{
    <tr>
        <td>@product.Item</td>
        <td>@product.Left</td>
        <td>@product.Unit</td> 
        <td>@product.Date</td> 
        <td>
            <button @onclick="() => products.Remove(product)">
                <span class="oi oi-trash" aria-hidden="true"></span>
            </button>  
        </td>
    </tr>
}
</table>

<div>
    <input type = "text" size="10" @bind="@itemTextField" @oninput="(e) => { itemTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> <b>&emsp;&emsp;</b>
    <input type = "number" @bind="@leftTextField" @oninput="(e) => { leftTextField = e.Value ==null? string.Empty:(string)e.Value;}"/> <b>&emsp;&emsp;</b>
    <select @bind="@unitTextField" @oninput="(e) => { unitTextField = e.Value ==null? string.Empty:(string)e.Value;}" name="unit" id="unit">
                        <option value="g">g</option>
                        <option value="kg">kg</option>
                        <option value="l">l</option>
                        <option value="ml">ml</option>
                        <option value="oz">oz</option>
                        <option value="units"></option>
                        </select>   <b>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;</b>
    <input @oninput="(e) => { dateTextField = e.Value ==null? string.Empty:(string)e.Value;}" type="date" id="bestuntilday" name="bestuntilday" size="1"> <b>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;</b>
    <button class="btn btn-primary" @onclick="AddProduct">Add new product</button>
</div>

@if(dishes.Any()){<h1><font color=#3a0647><br>Here's what you can make:</font></h1>}
<dl class="Recipes" >
    @foreach (string dish in dishes)
    {
        <dt style="color:#3a0647;font-size:30px;">@dish</dt>
        <dd>You will need: (coming soon)</dd>
    }
</dl>

@if(badProducts.Any()){<h1><font style="color:red;font-size:30px;"><br>Be careful! These products have 3 or less days left, before they expire:</font></h1>}
<ul class="Expired" >
    @foreach (string badProduct in badProducts)
    {
        <li style="color:red;font-size:30px;">@badProduct</li>
    }
</ul>